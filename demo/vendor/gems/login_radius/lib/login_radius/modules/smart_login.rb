require_relative "../request_client"

module LoginRadius
  class SmartLogin
    # Ruby wrapper for the LoginRadius Smart Login API module.
    include RequestClient

    BASE_RESOURCE = "/identity/v2/auth"

    attr_accessor :site_name, :api_key, :custom_api_domain

    # Initializes a LoginRadius SmartLogin object with an apikey
    # Takes in a hash containing site_name(required), api_key(required),
    # and custom_api_domain(optional)
    def initialize(options = {
      :site_name => "",
      :api_key => "",
      :custom_api_domain => ""
    })
      self.site_name = options[:site_name]
      self.api_key = options[:api_key]
      self.custom_api_domain = options[:custom_api_domain]

      raise LoginRadius::Error.new("'site_name' is a required option for SmartLogin class initialization.") \
        unless self.site_name != "" && self.site_name != nil
      raise LoginRadius::Error.new("'api_key' is a required option for SmartLogin class initialization.") \
        unless self.api_key != "" && self.api_key != nil
    end

    # GET - Smart Login by Email:
    # Sends a Smart Login link to a user's email using specified email.
    # https://docs.loginradius.com/api/v2/customer-identity-api/smart-login/smart-login-by-email
    #
    # @params email [String]                          User's email address
    # @params client_guid [String]                    Unique ID generated by the client 
    # @params smart_login_email_template [String]     Smart Login email template name
    # @params welcome_email_template [String]         Welcome email template name
    # @params redirect_url [String]                   Url to redirect user after successful authentication
    #
    # @returns [LoginRadius::Response]                LoginRadius response hash
    def smart_login_by_email(email, client_guid, smart_login_email_template = "", welcome_email_template = "", redirect_url = "")
      params = {
        :apikey => self.api_key,
        :email => email,
        :clientguid => client_guid,
        :smartloginemailtemplate => smart_login_email_template,
        :welcomeemailtemplate => welcome_email_template,
        :redirecturl => redirect_url
      }
      headers = {
        "Content-Type" => "application/x-www-form-urlencoded"
      }

      return get_request(
        build_uri_obj(
          BASE_RESOURCE + "/login/smartlogin",
          "api",
          self.custom_api_domain
        ),
        params,
        headers
      )
    end

    # GET - Smart Login by UserName:
    # Sends a Smart Login link to a user's email using specified username.
    # https://docs.loginradius.com/api/v2/customer-identity-api/smart-login/smart-login-by-username
    #
    # @params username [String]                       User's username
    # @params client_guid [String]                    Unique ID generated by the client 
    # @params smart_login_email_template [String]     Smart Login email template name
    # @params welcome_email_template [String]         Welcome email template name
    # @params redirect_url [String]                   Url to redirect user after successful authentication
    #
    # @returns [LoginRadius::Response]                LoginRadius response hash
    def smart_login_by_username(username, client_guid, smart_login_email_template = "", welcome_email_template = "", redirect_url = "")
      params = {
        :apikey => self.api_key,
        :username => username,
        :clientguid => client_guid,
        :smartloginemailtemplate => smart_login_email_template,
        :welcomeemailtemplate => welcome_email_template,
        :redirecturl => redirect_url
      }
      headers = {
        "Content-Type" => "application/x-www-form-urlencoded"
      }

      return get_request(
        build_uri_obj(
          BASE_RESOURCE + "/login/smartlogin",
          "api",
          self.custom_api_domain
        ),
        params,
        headers
      )
    end

    # GET - Smart Login Ping:
    # Checks if the Smart Login link has been clicked or not.
    # https://docs.loginradius.com/api/v2/customer-identity-api/smart-login/smart-login-ping
    #
    # @params client_guid [String]       Unique ID generated by the client
    #
    # @returns [LoginRadius::Response]   LoginRadius response hash
    def smart_login_ping(client_guid)
      params = {
        :apikey => self.api_key,
        :clientguid => client_guid
      }
      headers = {
        "Content-Type" => "application/x-www-form-urlencoded"
      }

      return get_request(
        build_uri_obj(
          BASE_RESOURCE + "/login/smartlogin/ping",
          "api",
          self.custom_api_domain
        ),
        params,
        headers
      )
    end

    # GET - Smart Login Verify Token
    # Verifies the provided token for Smart Login.
    # https://docs.loginradius.com/api/v2/customer-identity-api/smart-login/smart-login-verify-token
    #
    # @params verification_token [String]        Verification token recieved from email
    # @params welcome_email_template [String]    Welcome email template name
    #
    # @returns [LoginRadius::Response]           LoginRadius response hash
    def smart_login_verify_token(verification_token, welcome_email_template = "")
      params = {
        :apikey => self.api_key,
        :verificationtoken => verification_token,
        :welcomeemailtemplate => welcome_email_template
      }
      headers = {
        "Content-Type" => "application/x-www-form-urlencoded"
      }

      return get_request(
        build_uri_obj(
          BASE_RESOURCE + "/email/smartlogin",
          "api",
          self.custom_api_domain
        ),
        params,
        headers
      )
    end
  end
end

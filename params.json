{"name":"Ruby-on-rails-gem","tagline":"Ruby wrapper for the LoginRadius API. Get social graph information and send messages using LoginRadius' many social network clients!","body":"# LoginRadius\r\n\r\nRuby wrapper for the LoginRadius API. Get social graph information and send messages using LoginRadius'\r\nmany social network clients!\r\n\r\nOptional Asynchronous EventMachine friendly option!\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'login_radius'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install login_radius\r\n\r\n## Usage\r\n\r\nTake a peek:\r\n\r\n    @user_profile = LoginRadius::UserProfile.new({\r\n      :token => \"TOKEN\",\r\n      :secret => \"SECRET\",\r\n      :async => false #Set to true if using EventMachine driven frameworks(must use Em Synchrony)\r\n    })\r\n    @user_profile.login\r\n    my_contacts = @user_profile.contacts\r\n\t\t\r\nThat's right, folks. It's that simple. In order to get access to LoginRadius API, you only\r\nneed to create a UserProfile object with a user's login token and your apps secret, and login.\r\n\r\n### How to get a token and actually make a client\r\n\r\nOn the LoginRadius website, you are able to enter your own callback URL for your app. You will need\r\nto setup a route on whatever framework you use, maybe \"/callback.\" Then, get the gem forward(www.forwardhq.com)\r\nand use it to set up a public web address for your localhost server. Then, you can enter the callback on LoginRadius\r\nas https://jordanmatthew.fwd.wf/callback, for instance.\r\n\r\nPaste their example login stuff onto your index page, and then enter your FB/Twitter credentials on their site.\r\n\r\nNow you're ready to go with testing!\r\n\r\nWhen LoginRadius hits your callback after a user logs in, you'll see parameters like this:\r\n\r\nParameters: {\"token\"=>\"yourtokenhere\"}\r\n\r\nThis token is the token used in the above example. This is what you'll need to get your user's profile.\r\nJust paste it into the code above, and you can immediately grab their user profile on the callback,\r\nlogin, and grab their contacts.\r\n\r\n### Some examples\r\n\r\nBelow is just code exemplifying some of the more interesting methods and what they return.\r\nNote if you have a user authed via facebook, and not twitter, methods like \r\n\r\n    @user_profile.twitter_timeline\r\n    => false\r\n\t\t\r\nWill return false, indicating you don't have access to that stream.\r\n\r\n#### Facebook Stuff\r\n\r\n    @user_profile.facebook_groups\r\n    => [{:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"}]\r\n    \r\n    @user_profile.facebook_groups\r\n    => [{:id=>\"11111\", :name=>\"Name\"},\r\n     {:id=>\"11111\", :name=>\"Name\"}]\r\n    \r\n    \r\n    @user_profile.facebook_events\r\n    => [{:id=>\"11111\",\r\n      :name=>\"Name\",\r\n      :start_time=>\"3/14/2015 9:00:00 AM\",\r\n      :rsvp_status=>\"attending\",\r\n      :location=>\"Across the world!\"}]\r\n\r\nAnd, finally, you can also make facebook posts:\r\n\r\n    params = {\r\n      :title => \"Testing\",\r\n      :url => \"www.loginradius.com\",\r\n      :status => \"Wizzup\",\r\n      :caption => \"Testly\",\r\n      :description => \"Testing\"\r\n    }\r\n    @user_profile.make_facebook_post(params)\r\n    => true\r\n\r\nNote that as of publishing, the :to option on facebook params does not work. You can't post to\r\nother people's walls.\r\n\r\n#### LinkedIn Stuff\r\n\r\nTo send messages over linked in:\r\n\r\n    @user_profile.send_linked_in_message(@user_profile.contacts.first[:id], \"Testing\", \"This is a test.\")\r\n    => true\r\n\t\t\r\nNotice how I grabbed my first contact and used his :id property.\r\n\r\nAlso, you can grab a user's linked in companies:\r\n\r\n    @user_profile.linked_in_companies\r\n    => [{:id=>11111, :name=>\"Name\"}]\r\n\t\t\r\n#### Twitter Stuff\r\n\r\nTo send messages over twitter:\r\n\t\r\n    @user_profile.send_linked_in_message(@user_profile.contacts.first[:id], \"Testing\", \"This is a test.\")\r\n    => true\r\n\t\r\nNotice how I grabbed my first contact and used his :id property.\r\n\t\r\nGrab your timelines and mentions:\r\n\r\n    @user_profile.twitter_timeline\r\n    => [{:id=>\"11111\",\r\n        :text=>\"Stuff\",\r\n        :date_time=>\"5/20/2013 4:53:52 PM\",\r\n        :likes=>0,\r\n        :place=>\"\",\r\n        :source=>\r\n         \"<a href=\\\"http://twitterfeed.com\\\" rel=\\\"nofollow\\\">twitterfeed</a>\",\r\n        :image_url=>nil,\r\n        :link_url=>nil,\r\n        :name=>\"Name\"}]\r\n        \r\n    @user_profile.twitter_mentions\r\n    => [{:id=>\"11111\",\r\n        :text=>\"Stuff\",\r\n        :date_time=>\"3/31/2013 7:54:10 PM\",\r\n        :likes=>0,\r\n        :place=>\"\",\r\n        :source=>\"web\",\r\n        :image_url=>nil,\r\n        :link_url=>nil,\r\n        :name=>\"Name\"}]\r\n\t\t\r\n#### Social Network Contacts\r\n\r\nNote this is all the contacts from every social network the user is connected to.\r\n\r\n    @user_profile.contacts\r\n    => [{:name=>\"Name\",\r\n      :email_id=>\"\",\r\n      :phone_number=>\"\",\r\n      :id=>\"11111\",\r\n      :profile_url=>nil,\r\n      :image_url=>nil,\r\n      :status=>nil,\r\n      :industry=>nil,\r\n      :country=>nil,\r\n      :gender=>nil}]\r\n\r\n#### User Profile Stuff\r\n\r\nWhen you login, the API returns a hash of user profile information, which is then turned into methods\r\non the LoginRadius::UserProfile object for your accessing pleasure. A quick call to methods will show this. \r\n\r\n    @user_profile.methods\r\n    =>[:id,\r\n     :provider,\r\n     :prefix,\r\n     :first_name,\r\n     :middle_name,\r\n     :last_name,\r\n     :suffix,\r\n     :full_name,\r\n     :nick_name,\r\n     :profile_name,\r\n     :birth_date,\r\n     :gender,\r\n     :website,\r\n     :email,\r\n     :country,\r\n     ...]\r\n\r\nCalling .methods on a user profile right after a successful login call will reveal these. \r\nFor more information, please read the section in caveats on the matter, as it's a bit esoteric.\r\n\r\n## Caveats\r\n\r\nThis section is for the nitpickers. It's got notes about the finer pickings of this API for those\r\nwho are wondering, but is not strictly necessary reading.\r\n\r\n### The Bang Methods\r\n\r\nWhen authenticated, a method like contacts will return \r\n\r\n    @user_profile.authenticated?\r\n    => true\r\n    @user_profile.contacts \r\n    => [{:name=>\"Name\",\r\n      :email_id=>\"\",\r\n      :phone_number=>\"\",\r\n      :id=>\"11111\",\r\n      :profile_url=>nil,\r\n      :image_url=>nil,\r\n      :status=>nil,\r\n      :industry=>nil,\r\n      :country=>nil,\r\n      :gender=>nil},\r\n      ...\r\n\t\t\r\nWhen unauthenticated, a method like contacts will return false.\r\n\r\n    @user_profile.authenticated?\r\n    => false\r\n    @user_profile.contacts\r\n    => false\r\n\r\nHowever, if you want to be a bit more flammable, try using contacts!, the bang version. It still returns\r\nthe same results when authed, but when unauthed, will actually raise a LoginRadius::Exception.\r\n\t\r\n### The LoginRadius::UserProfile object before and after login\r\n\r\nOnce you've got a valid user_profile, you have many methods available to you. Let's quickly take a look \r\nat the methods in a LoginRadius::UserProfile object that hasn't yet been authenticated:\r\n\r\n    @user_profile.authenticated?\r\n    => false\r\n    \r\n    @user_profile.methods - Object.new.methods\r\n    => [:secret,\r\n     :secret=,\r\n     :token,\r\n     :token=,\r\n     :async,\r\n     :async=,\r\n     :guid_valid?,\r\n     :authenticated?,\r\n     :call_api,\r\n     :send_twitter_message,\r\n     :send_linkedin_message,\r\n     :make_facebook_post,\r\n     :login!,\r\n     :login,\r\n     :twitter_mentions!,\r\n     :twitter_mentions,\r\n     :twitter_timeline!,\r\n     :twitter_timeline,\r\n     :linked_in_companies!,\r\n     :linked_in_companies,\r\n     :contacts!,\r\n     :contacts,\r\n     :facebook_groups!,\r\n     :facebook_groups,\r\n     :facebook_posts!,\r\n     :facebook_posts,\r\n     :facebook_events!,\r\n     :facebook_events]\r\n\t\t\r\nNotice we've got a lot of stuff we can access. But we're not yet authenticated. Running login and then checking\r\nthe new methods created, we see we have much more than before!\r\n\t\t\r\n    @user_profile.login\r\n    => true\r\n    @user_profile.authenticated?\r\n    => true\r\n    @user_profile.methods - Object.new.methods\r\n    => [:id,\r\n    :provider,\r\n    :prefix,\r\n    :first_name,\r\n    :middle_name,\r\n    :last_name,\r\n    :suffix,\r\n    :full_name,\r\n    :nick_name,\r\n    :profile_name,\r\n    :birth_date,\r\n    :gender,\r\n    :website,\r\n    :email,\r\n    :country,\r\n    :thumbnail_image_url,\r\n    :image_url,\r\n    :favicon,\r\n    :profile_url,\r\n    :home_town,\r\n    :state,\r\n    :city,\r\n    :industry,\r\n    :about,\r\n    :time_zone,\r\n    :local_language,\r\n    :language,\r\n    :verified,\r\n    :updated_time,\r\n    :positions,\r\n    :educations,\r\n    :phone_numbers,\r\n    :im_accounts,\r\n    :addresses,\r\n    :main_address,\r\n    :created,\r\n    :local_city,\r\n    :profile_city,\r\n    :local_country,\r\n    :profile_country,\r\n    :relationship_status,\r\n    :quota,\r\n    :interested_in,\r\n    :interests,\r\n    :religion,\r\n    :political,\r\n    :sports,\r\n    :inspirational_people,\r\n    :https_image_url,\r\n    :followers_count,\r\n    :friends_count,\r\n    :is_geo_enabled,\r\n    :total_statuses_count,\r\n    :associations,\r\n    :num_recommenders,\r\n    :honors,\r\n    :skills,\r\n    :current_status,\r\n    :certifications,\r\n    :courses,\r\n    :volunteer,\r\n    :recommendations_received,\r\n    :languages,\r\n    :public_repository,\r\n    :hireable,\r\n    :repository_url,\r\n    :age,\r\n    :patents,\r\n    :favorite_things,\r\n    :professional_headline,\r\n    :provider_access_credential,\r\n    :secret,\r\n    :secret=,\r\n    :token,\r\n    :token=,\r\n    :async,\r\n    :async=,\r\n    :guid_valid?,\r\n    :authenticated?,\r\n    :call_api,\r\n    :send_twitter_message,\r\n    :send_linkedin_message,\r\n    :make_facebook_post,\r\n    :login!,\r\n    :login,\r\n    :twitter_mentions!,\r\n    :twitter_mentions,\r\n    :twitter_timeline!,\r\n    :twitter_timeline,\r\n    :linked_in_companies!,\r\n    :linked_in_companies,\r\n    :contacts!,\r\n    :contacts,\r\n    :facebook_groups!,\r\n    :facebook_groups,\r\n    :facebook_posts!,\r\n    :facebook_posts,\r\n    :facebook_events!,\r\n    :facebook_events]\r\n\t\t\t\r\nHoly moly we got a whole bunch of new methods! That's because on login, all the user profile information\r\nreturned by the API is turned into dynamically generated GETTERs on the object that you can then use later.\r\n\r\n### Running the tests in test/unit\r\n\r\nThe base_test.rb file isn't meant to be run, it is inherited by user_profile_test.rb. In that file\r\nyou'll notice the lines at the top of the file:\r\n\r\n    TOKEN = \"yourtokenhere\"\r\n    SECRET = \"yoursecrethere\"\r\n\r\nThese are meant to be changed to your API secret and some user's token. What I do is I run a dummy\r\nrails app locally and use the forward gem so that it can receive requests from the internet. Then I setup\r\na callback route and login page on the app and use it to have LoginRadius ping me with tokens that I can\r\npaste into this test file.\r\n\r\n*Beware, LoginRadius invalidates any token after 15 minutes, so during testing, you'll have to repeat the token\r\ncreation A LOT*\r\n\r\nTo run the tests, do:\r\n\r\n    bundle exec ruby -Itest test/unit/user_profile_test.rb\r\n\t\t\r\nIf you login with a facebook user, for instance, you'll notice all the twitter/linked in tests failing.\r\nThis is to be expected, you don't have access to those streams!\r\n\r\n### Evented Frameworks\r\n\r\nI've built this gem to work with frameworks like Cramp. I've done a little bit of testing by creating\r\na basic event loop script in basic_async_test.rb in the test folder, which you can run to see that\r\nthings work there.\r\n\r\nI've also done some AB testing using a Cramp framework elsewhere, but you should take caution in using\r\nthis gem in evented frameworks and make sure to use apache bench to test it for nonblocking yourself.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"UA-22321867-5","note":"Don't delete this file! It's used internally to help with page regeneration."}